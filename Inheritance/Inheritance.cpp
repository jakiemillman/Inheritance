// Inheritance
  //Наследование - это способность классов наследовать свойства других классов. Под свойствами в данном случае понимаю переменные и методы. 
//В наследовании различают родительский класс, который так же называют базовым и дочерний класс, который так же называют производным. Класс может быть одновременно как базовым так и наследником.
//Базовый класс не знает сколько и каких классов от него уноследованно. Адочерний класс знает только своего блтжайшего родителя.
/*Наследование реализует отношение между классами типа является, т. е. прежде чем что-то от чего-то унаследовать, нужно убедиться в том, что что-то является чем-то. Кроме "является" есть ещё отношение между классами
* часть - целое(Hole-part). Такие отношения реализуются с помощью аггрегирования и компазиции. Агрегирование - это когда часть и целое не могут существовать друг без друга.

//////////////////////////////////Полиморфизм/////////////////////////////////////////////////
	Полиморфизм - это способность объектов вести себя по разному, в зависимости от обстоятельств. Реализуется с помощью перегрузни функции, В ЧАСТНОСТИ ПЕРЕГРУЗКИ ОПЕРАТОРОВ. Такой
полиморфизм называется Ad-Hoc polimorphism, и выполняется на этапе компиляции. Передаваемые в функцию параметры при её вызове, являются обстоятествами, при которых вызывается функция. 
Особое место в ООП занимает полиморфизм подтипов. Это способность объектов вести себя поразному, в зависимости от того кем они являются. В с++ это называют inclusion polimorphism, 
он отрабатывает на этам выполнения. Он реализуется при помощи указателей на базовый класс и вертуальных методов.
 !!!!!!!!!Указатели на базовый класс.
	Указатель на базовый клас может хранить адрес дочерно объекта. Это позволяет производить обобщение объектов (Geniralisation), т. е. в одном месте собирать объекты разных типов и работать с ними, 
если у этих объектов 1 родительский класс. Приведение дочернего объекта к базовому типу называется upcast.

!!!!!!!!!!Виртуальные методы.
	Виртульным может быть метод, который может быть переопределен в его классе с учётом его полей. Дело в том что базовый класс не знает сколько от него наследований, и тем более не знает из чего состоят эти классы.
И единственным способом заглянуть из базового класса в дочерний являются виртуальные методы. Виртуальный метод вызваннй для базового класса выполняется для дочернего класса.
Это достигается благодаря так называемой vfptr - virtual function  pointers (таблица указателей на виртуальные функции, которая неявно создается в базовом классе, как только в нем появляется хотябы 1 виртуальный метод)
*/